## Java入门实战
* `main`是程序开始的入口  *输入main后回车*会自动补全指令`public static void main(String[] args)`  
* `println`控制输出  *输入sourt后回车*会自动跳出输出指令`System.out.println("")`  

**输入框组件Textfiled**：
>new TextField.var

```
import com.vaadin.flow.component.textfield.TextField

TextField field = new TextField();
field.setLabel("String label");
field.setPlaceholder("String placeholder");
field.setValue("String value");
String str1 = field.getValue();
add(field);
```

**布局组件OrderedLayout&类继承&注解**：
```
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.router.Route;

@Route("/")
public class Todo extends VerticalLayout {
   public Todo{

   }
}
```

**按钮Button**
```
import com.vaadin.flow.component.button.Button

Button addButton = new Button("login");
addButton.addClickListener(click->{
    System.out.println("login");
});
add(addButton)
```
**配置Apache commons-io**
找到工程里的

**提示Notification**
```
import com.vaadin.flow.component.notification.Notification

Notification notification = new Notification();
notification.setDuration(3000);
notification.setText("login success");
notification.open();
```

**获取时间LocalDatetime**
```
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

LocalDate d1 = LocalDate.now();
LocalDate d2 = LocalDate.parse("2018-11-11");

int year = time.getYear();
int month = time.getMonth().getValue();
int day = time.getDayOfMonth();
int dayOfWeek = time.getDayOfWeek().getValue();

boolean isBefore = d1.minusDays(1).isBefore(LocalDate.now());
boolean isAfter = d1.plusDays(1).isAfter(LocalDate.now());
boolean sameDate = d1.isEqual(LocalDate.now());

System.out.println("加1天：" + d1.plusDays(1));
System.out.println("加1周：" + d1.plusWeeks(1));
System.out.println("加1月：" + d1.plusMonths(1));
System.out.println("加1年：" + d1.plusYears(1));
System.out.println("减1天：" + d1.minusDays(1));
System.out.println("减1周：" + d1.minusWeeks(1));
System.out.println("减1月：" + d1.minusMonths(1));
System.out.println("减1年：" + d1.minusYears(1));

LocalTime t1 = LocalTime.now();
LocalDateTime time = LocalDateTime.now();

DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
System.out.println(dtf.format(time));

String str1 = d1.toString();

String timestr1 = "2025-07-07T19:24:10";
LocalDateTime time1 = LocalDateTime.parse(timestr1);
String timestr2 = "2025/07/07 19:24:10";
LocalDateTime time2 = LocalDateTime.parse(timestr2,dtf);
```

**集合**
```
import java.util.ArrayList;
import java.util.List;

List<String> strings = new ArrayList<>();
strings.add("abc");
System.out.println(strings.get(0));
System.out.println(strings.size());
strings.remove(0);
strings.clear();

List<User> users = new ArrayList<>();
User user = new User();
user.setUserName("admin");
users.add(user);
user = new User();
user.setUserName("admin1");
users.add(user);
System.out.println(users.get(0).getUserName());
```
**配置Apache commons-io**
找到工程里的`pom.xml`文件，在`<dependencies>`节点里添加如下内容
```
<dependency>
  <groupId>commons-io</groupId>
  <artifactId>commons-io</artifactId>
  <version>2.10.0</version>
</dependency>
```

**文件工程File**
```
import java.io.File
impotr java.io.IOException

try {
String content = FileUtils.readFileToString(new File("./data/users.txt"),"utf-8");
System.out.println(content);
} catch (IOException e) {
    e.printStackTrace();
}

try{
List<String> content = new ArrayList<>();
content = FileUtils.readlines(new File("./data/users.txt"),"utf-8");
System.out.println(content);
} catch (IOException e) {
    e.printStackTrace();
}
```
**处理LocalDateTime的json对象**
```
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;

@JsonDeserialize(using = LocalDateTimeDeserializer.class)
@JsonSerialize(using = LocalDateTimeSerializer.class)
@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm:ss")
private LocalDateTime gmtCreated;
```
**json读文件**
```
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

ObjectMapper mapper = new Objectmapper();

try {
String content = FileUtils.readFileToString(new File("./date/users.json"),"utf-8")
User user = mapper.readValue(content, User.class);
} catch (IOException e) {
e.printStackTrace();
};

try {
String content = FileUtils.readFileToString(new File("./data.user.json"),"utf-8");
users = mapper.readValue(content, new TypeReference<List<User>>() {
});
} catch (IOException e) {
e.printStackTrace();
};
```
**json写文件**
```
ObjectMapper mapper = new Objectmapper();

try {
String content = mapper.writeValueAsString(users);
FileUtile.writeStringToFile(new File("./data/users_new.json"),content,"utf-8");
} catch (IOException e) {
e.printStackTrace();
};
```
**项目全代码**  
`LoginView`
```
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.html.H1;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.login.AbstractLogin;
import com.vaadin.flow.component.login.LoginForm;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.server.VaadinService;
import org.vaadin.marcus.spring.model.User;

import javax.servlet.http.Cookie;

@Route("login.html")
public class LoginView extends VerticalLayout {

    private LoginForm loginForm = new LoginForm();

    public LoginView() {

        setJustifyContentMode(JustifyContentMode.CENTER);
        setAlignItems(Alignment.CENTER);

        loginForm.setForgotPasswordButtonVisible(false);

        H1 h1 = new H1("TODO");

        HorizontalLayout regLayout = new HorizontalLayout();
        regLayout.setAlignItems(Alignment.CENTER);
        Label tips = new Label("Don’t have an account?");
        Button regBtn = new Button("Sign up here.");
        regBtn.setThemeName("tertiary");
        regBtn.addClickListener(this::onSign);

        regLayout.add(tips, regBtn);

        loginForm.addLoginListener(this::onLogin);

        add(h1, regLayout, loginForm);

    }


    public void onSign(ClickEvent event){
        getUI().ifPresent(ui -> {
            ui.navigate("/reg.html");
        });
    }

    public void onLogin(AbstractLogin.LoginEvent event){
        String userName = event.getUsername();
        String password = event.getPassword();

        for (User user : Reg.users) {
            if (user.getUserName().equals(userName) && user.getPassword().equals(password)){
                Notification notification = new Notification();
                notification.setDuration(3000);
                notification.setText("login success");
                notification.open();

                Cookie cookie = new Cookie("username",userName);
                cookie.setPath("/");

                VaadinService.getCurrentResponse().addCookie(cookie);

                System.out.println(getUI().isPresent());

                getUI().ifPresent(ui -> {
                    ui.navigate("/");
                });

                return;
            }
        }
        loginForm.setError(true);
    }
}
```
`Reg`
```
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.router.Route;
import org.apache.commons.io.FileUtils;
import org.vaadin.marcus.spring.model.User;
import java.io.File;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Route("/reg.html")
public class Reg extends VerticalLayout {

    public static List<User> users = new ArrayList<>();

    private static ObjectMapper mapper = new ObjectMapper();
    private static File usersFile = new File("./data/users.json");

    static {

        if (usersFile.exists()) {
            try {
               String content = FileUtils.readFileToString(usersFile, "utf-8");

                List<User> userList = mapper.readValue(content, new TypeReference<List<User>>() {
                });

                users.addAll(userList);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    public Reg() {

        TextField userNameField = new TextField();
        initUserNameField(userNameField);

        TextField passwordField = new TextField();
        initPasswordField(passwordField);

        TextField confirmPasswordField = new TextField();
        initConfirmPasswordField(confirmPasswordField);

        Button regButton = new Button("Reg");

        regButton.addClickListener(click -> {
            onReg(userNameField, passwordField, confirmPasswordField);
        });

        add(userNameField);
        add(passwordField);
        add(confirmPasswordField);
        add(regButton);

    }

    public void initUserNameField(TextField userNameField) {
        String userName = "UserName";
        userNameField.setLabel(userName);
        userNameField.setPlaceholder("please input username");
    }

    public void initPasswordField(TextField passwordField) {
        String password = "Password";
        passwordField.setLabel(password);
        passwordField.setPlaceholder("please input password");
    }

    public void initConfirmPasswordField(TextField passwordField) {
        String password = "Confirm Password";
        passwordField.setLabel(password);
        passwordField.setPlaceholder("please input confirm password");
    }

    public void onReg(TextField userNameField, TextField passwordField, TextField confirmPasswordField) {
        String userNameText = userNameField.getValue();
        String pwdText = passwordField.getValue();
        String confirmPwdText = confirmPasswordField.getValue();

        Notification notification = new Notification();
        notification.setDuration(3000);

        if (userNameText == null || "".equals(userNameText)) {
            notification.setText("need input username");
            notification.open();
            // 程序执行到这就结束啦，后面的代码不再执行咯
            return;
        }

        if (pwdText != null && !"".equals(pwdText) && pwdText.equals(confirmPwdText)) {

            for (User user : users) {

                if (userNameText.equals(user.getUserName())){
                    notification.setText("username already reg");
                    notification.open();
                    return;
                }

            }

            User user = new User();
            user.setUserName(userNameText);
            user.setPassword(pwdText);

            LocalDateTime gmtCreated = LocalDateTime.now();
            user.setGmtCreated(gmtCreated);

            users.add(user);

            String userName = user.getUserName();

            notification.setText("reg success " + userName);

            try {
                String content = mapper.writeValueAsString(users);
                FileUtils.writeStringToFile(usersFile, content, "utf-8");
            } catch (Exception e) {
                e.printStackTrace();
            }

        } else {
            notification.setText("confirm pwd error");
        }
        notification.open();
    }
}
```
`Todo`
```
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.UI;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.checkbox.Checkbox;
import com.vaadin.flow.component.html.H1;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.router.*;
import com.vaadin.flow.server.VaadinService;
import javax.servlet.http.Cookie;

@Route("/")
public class Todo extends VerticalLayout implements AfterNavigationObserver{

    private VerticalLayout todoList = new VerticalLayout();
    public Todo() {

        TextField todoField = new TextField();
        Button addButton = new Button("Add");
        addButton.addClickListener(buttonClickEvent -> {
            onAdd(buttonClickEvent, todoField);
        });

        new HorizontalLayout(todoField,addButton);

        add(new H1("TODO"),new H4("Hello "+getUserName()),todoList,new HorizontalLayout(todoField,addButton));

    }

    public String getUserName(){

        for(Cookie cookie : VaadinService.getCurrentRequest().getCookies()){
            if(cookie.getName().equals("username")){
                return cookie.getValue();
            }
        }
        return "";
    }

    public  void  onAdd(ClickEvent event, TextField todoField){
        String todoVal = todoField.getValue();
        Checkbox checkbox = new Checkbox(todoVal);
        todoList.add(checkbox);
    }
    @Override
    public void afterNavigation(AfterNavigationEvent afterNavigationEvent) {

        for (Cookie cookie : VaadinService.getCurrentRequest().getCookies()) {
            if (cookie.getName().equals("username")){
                return;
            }
        }

        getUI().ifPresent(ui -> {
            ui.navigate("/login.html");
        });
    }
}
```
